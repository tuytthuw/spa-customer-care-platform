// src/app/(dashboard)/customers/page.tsx (PHI√äN B·∫¢N CU·ªêI C√ôNG)
"use client";

import { useState } from "react";
// 1. Import th√™m useMutation v√† useQueryClient
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Customer } from "@/types/customer";
import { columns } from "./columns";
import { DataTable } from "@/components/ui/data-table";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import AddCustomerForm from "@/components/forms/AddCustomerForm";
// 2. Import th√™m h√†m addCustomer
import { getCustomers, addCustomer } from "@/services/customerService";

interface CustomerFormValues {
  name: string;
  email: string;
  phone: string;
}

export default function CustomersPage() {
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  // 3. Kh·ªüi t·∫°o Query Client
  const queryClient = useQueryClient();

  // Query ƒë·ªÉ l·∫•y d·ªØ li·ªáu (gi·ªØ nguy√™n)
  const {
    data: customers = [],
    isLoading,
    error,
  } = useQuery<Customer[]>({
    queryKey: ["customers"],
    queryFn: getCustomers,
  });

  // 4. T·∫°o mutation ƒë·ªÉ x·ª≠ l√Ω vi·ªác th√™m kh√°ch h√†ng
  const addCustomerMutation = useMutation({
    mutationFn: addCustomer, // H√†m s·∫Ω ƒë∆∞·ª£c g·ªçi khi mutation ƒë∆∞·ª£c trigger
    onSuccess: () => {
      // üöÄ Ph√©p m√†u x·∫£y ra ·ªü ƒë√¢y!
      // Sau khi th√™m th√†nh c√¥ng, l√†m v√¥ hi·ªáu (invalidate) cache c·ªßa query 'customers'
      // React Query s·∫Ω t·ª± ƒë·ªông fetch l·∫°i d·ªØ li·ªáu m·ªõi nh·∫•t.
      console.log(
        "Customer added successfully! Invalidating customers query..."
      );
      queryClient.invalidateQueries({ queryKey: ["customers"] });
      setIsDialogOpen(false); // ƒê√≥ng dialog sau khi th√†nh c√¥ng
    },
    onError: (error) => {
      // X·ª≠ l√Ω l·ªói (v√≠ d·ª•: hi·ªÉn th·ªã th√¥ng b√°o)
      console.error("Failed to add customer:", error);
      alert("Th√™m kh√°ch h√†ng th·∫•t b·∫°i!");
    },
  });

  // 5. C·∫≠p nh·∫≠t h√†m handleAddCustomer ƒë·ªÉ trigger mutation
  const handleAddCustomer = (data: CustomerFormValues) => {
    addCustomerMutation.mutate(data); // G·ªçi mutation v·ªõi d·ªØ li·ªáu t·ª´ form
  };

  // ... (x·ª≠ l√Ω isLoading, error gi·ªØ nguy√™n) ...

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Qu·∫£n l√Ω Kh√°ch h√†ng</h1>
        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogTrigger asChild>
            <Button>Th√™m kh√°ch h√†ng m·ªõi</Button>
          </DialogTrigger>
          <DialogContent>
            {/* ... */}
            <AddCustomerForm
              onFormSubmit={handleAddCustomer}
              onClose={() => setIsDialogOpen(false)}
              // 6. Th√™m prop ƒë·ªÉ v√¥ hi·ªáu h√≥a form khi ƒëang submit
              isSubmitting={addCustomerMutation.isPending}
            />
          </DialogContent>
        </Dialog>
      </div>
      <DataTable columns={columns} data={customers} />
    </div>
  );
}
